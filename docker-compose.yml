volumes:
  redisdata:
    driver: local
  cache_pgdata:
    driver: local
  prometheus_data:
  grafana_data:

services:
  redis:
    image: redis:6.0
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    volumes:
      - redisdata:/data
      - $PWD/redis.conf:/usr/local/etc/redis/redis.conf
    expose:
      - "6379"

  cache-db:
    image: postgres:13
    restart: unless-stopped
    environment:
      POSTGRES_USER: abc
      POSTGRES_PASSWORD: abc
      POSTGRES_DB: lm_cache_db
    volumes:
      - cache_pgdata:/var/lib/postgresql/data
    ports:
      - "54321:5432"
      
  metadata-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
      cache_from:
        - metadata-api:latest
    image: metadata-api:latest
    restart: unless-stopped
    depends_on:
      - redis
      - cache-db
    ports:
      - "5001:5001"  # 假设API服务运行在5000端口，请根据实际情况调整
    environment:
      - DB_USER=abc
      - DB_PASSWORD=abc
      - DB_NAME=lm_cache_db
    networks:
      - default
      - monitoring  # 将 metadata-api 加入到 monitoring 网络

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

networks:
  monitoring:
    driver: bridge
